{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","setCity","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","x","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kKACMA,EACC,mCADDA,EAEE,2CAuEOC,MApEf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAIWJ,mBAAS,IAJpB,mBAIAK,GAJA,WAgCb,OAEE,yBAAKC,UAAmC,oBAAhBH,EAAQI,KAA0B,KAACJ,EAAQI,KAAKC,KAAO,KAAe,GAAM,GAAM,UACxG,KAACL,EAAQI,KAAKC,KAAO,KAAe,GAAM,GAAM,WAClD,MAAS,OAEP,8BACE,yBAAKF,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIV,EAASU,EAAEC,OAAOC,QACjCA,MAAOb,EACPc,WAzCK,SAAAC,GAEG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIpB,EAAJ,qBAAyBG,EAAzB,gCAAsDH,IAC1DqB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJpB,EAAS,IACTE,EAAWkB,GACXjB,EAAQiB,GACRC,QAAQC,IAAIF,UAoCa,oBAAhBnB,EAAQI,KACf,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,YAAYH,EAAQsB,KAAnC,KAA2CtB,EAAQuB,IAAIC,SACvD,yBAAKrB,UAAU,QAlCL,SAACsB,GAEnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAwBHE,CAAY,IAAIC,OAEvC,yBAAKhC,UAAU,eACb,yBAAKA,UAAU,QACXiC,KAAKC,MAAM,KAACrC,EAAQI,KAAKC,KAAO,KAAe,IADnD,SAGA,yBAAKF,UAAU,WAAWH,EAAQA,QAAQ,GAAGI,QAG9C,MCxDOkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.e6a765ff.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nconst api = {\r\n  key: \"923cacccb6c3bc53838fb85e48716356\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [weather, setWeather] = useState({});\r\n  const [city, setCity] = useState({});\r\n  const search = evt => {\r\n\r\n    if (evt.key === \"Enter\") {\r\n      fetch(`${api.base}weather?q=${query}&units=metrics&APPID=${api.key}`)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        setQuery('');\r\n        setWeather(result);\r\n        setCity(result);\r\n        console.log(result);\r\n      });\r\n    }\r\n  }\r\n\r\n  const dateBuilder = (x) => {\r\n\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    let day = days[x.getDay()];\r\n    let date = x.getDate();\r\n    let month = months[x.getMonth()];\r\n    let year = x.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n  }\r\n\r\n  return (\r\n\r\n    <div className={(typeof weather.main != \"undefined\") ? ((((weather.main.temp - 273) * (9/5) + 32) > 80) ? 'app hot' :\r\n    (((weather.main.temp - 273) * (9/5) + 32) < 40) ? 'app cold' :\r\n    'app') : 'app'}>\r\n\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"type\"\r\n            className=\"search-bar\"\r\n            placeholder=\"Search...\"\r\n            onChange={e => setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n          />\r\n        </div>\r\n\r\n        {(typeof weather.main != \"undefined\") ? (\r\n          <div className=\"location-box\">\r\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\r\n            <div className=\"date\">{dateBuilder(new Date())}</div>\r\n\r\n            <div className=\"weather-box\">\r\n              <div className=\"temp\">\r\n                {(Math.round((weather.main.temp - 273) * (9/5) + 32))}Â°F\r\n              </div>\r\n              <div className=\"weather\">{weather.weather[0].main}</div>\r\n              </div>\r\n            </div>\r\n        ) : ('') }\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}